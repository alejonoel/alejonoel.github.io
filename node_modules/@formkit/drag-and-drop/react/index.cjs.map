{"version":3,"sources":["../../src/react/index.ts","../../src/react/utils.ts"],"sourcesContent":["import type { ReactDragAndDropConfig } from \"./types\";\nimport type { ParentConfig } from \"../types\";\nimport type { Dispatch, SetStateAction, RefObject } from \"react\";\nimport { useRef, useEffect, useState } from \"react\";\nimport { dragAndDrop as initParent, isBrowser, tearDown } from \"../index\";\nimport { handleReactElements } from \"./utils\";\nexport * from \"./types\";\n\n/**\n * Global store for parent els to values.\n */\nconst parentValues: WeakMap<\n  HTMLElement,\n  [Array<unknown>, React.Dispatch<React.SetStateAction<Array<unknown>>>]\n> = new WeakMap();\n\nfunction getValues<T>(parent: HTMLElement): Array<T> {\n  const values = parentValues.get(parent);\n  if (!values) {\n    console.warn(\"No values found for parent element\");\n    return [];\n  }\n  return values[0] as Array<T>;\n}\n\nfunction setValues(newValues: Array<unknown>, parent: HTMLElement): void {\n  const values = parentValues.get(parent);\n  if (values) values[1](newValues);\n  parentValues.set(parent, [newValues, values![1]]);\n}\n\nfunction handleParent<E extends RefObject<HTMLElement | null> | HTMLElement, T>(\n  config: Partial<ReactDragAndDropConfig<E, T[]>>,\n  values: [Array<any>, React.Dispatch<React.SetStateAction<Array<any>>>]\n) {\n  return (el: HTMLElement) => {\n    parentValues.set(el, values);\n    initParent<T>({ parent: el, getValues, setValues, config });\n  };\n}\n\n/**\n * Entry point for React drag and drop.\n *\n * @param data - The drag and drop configuration.\n * @returns void\n */\nexport function dragAndDrop<E extends HTMLElement, I>(\n  data:\n    | ReactDragAndDropConfig<RefObject<E | null> | HTMLElement, I[]>\n    | Array<ReactDragAndDropConfig<RefObject<E | null> | HTMLElement, I[]>>\n): void {\n  if (!isBrowser) return;\n  if (!Array.isArray(data)) data = [data];\n  data.forEach((dnd) => {\n    const { parent, state, ...rest } = dnd;\n    handleReactElements(parent, handleParent(rest, state));\n  });\n}\n\n/**\n * Hook for adding drag and drop/sortable support to a list of items.\n *\n * @param list - Initial list of data.\n * @param options - The drag and drop configuration.\n * @returns\n */\nexport function useDragAndDrop<E extends HTMLElement, T = unknown>(\n  list: T[],\n  options: Partial<ParentConfig<T>> = {}\n): [RefObject<E>, T[], Dispatch<SetStateAction<T[]>>] {\n  const parent: RefObject<E> = useRef<E>(null);\n  const [values, setValues] = useState(list);\n\n  useEffect(() => {\n    dragAndDrop({ parent, state: [values, setValues], ...options });\n    return () => {\n      if (parent.current) tearDown(parent.current);\n    };\n  }, [parent.current]);\n\n  return [parent, values, setValues];\n}\n","import type { ReactElement } from \"./types\";\n\n/**\n * Checks if the given parent is an HTMLElement.\n *\n * @param dnd - The drag and drop configuration.\n */\nexport function getEl(parent: HTMLElement | ReactElement): HTMLElement | void {\n  if (parent instanceof HTMLElement) return parent;\n  else if (\"current\" in parent && parent.current instanceof HTMLElement)\n    return parent.current;\n  else {\n    console.warn(\"Invalid parent element\", parent);\n\n    return;\n  }\n}\n\nexport function handleReactElements(\n  elements: Array<ReactElement> | ReactElement,\n  cb: (el: HTMLElement) => void\n): void {\n  if (!Array.isArray(elements)) elements = [elements];\n\n  for (const element of elements) {\n    const el = getEl(element);\n\n    if (el) cb(el);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,mBAA4C;AAC5C,eAA+D;;;ACGxD,SAAS,MAAM,QAAwD;AAC5E,MAAI,kBAAkB;AAAa,WAAO;AAAA,WACjC,aAAa,UAAU,OAAO,mBAAmB;AACxD,WAAO,OAAO;AAAA,OACX;AACH,YAAQ,KAAK,0BAA0B,MAAM;AAE7C;AAAA,EACF;AACF;AAEO,SAAS,oBACd,UACA,IACM;AACN,MAAI,CAAC,MAAM,QAAQ,QAAQ;AAAG,eAAW,CAAC,QAAQ;AAElD,aAAW,WAAW,UAAU;AAC9B,UAAM,KAAK,MAAM,OAAO;AAExB,QAAI;AAAI,SAAG,EAAE;AAAA,EACf;AACF;;;ADlBA,IAAM,eAGF,oBAAI,QAAQ;AAEhB,SAAS,UAAa,QAA+B;AACnD,QAAM,SAAS,aAAa,IAAI,MAAM;AACtC,MAAI,CAAC,QAAQ;AACX,YAAQ,KAAK,oCAAoC;AACjD,WAAO,CAAC;AAAA,EACV;AACA,SAAO,OAAO,CAAC;AACjB;AAEA,SAAS,UAAU,WAA2B,QAA2B;AACvE,QAAM,SAAS,aAAa,IAAI,MAAM;AACtC,MAAI;AAAQ,WAAO,CAAC,EAAE,SAAS;AAC/B,eAAa,IAAI,QAAQ,CAAC,WAAW,OAAQ,CAAC,CAAC,CAAC;AAClD;AAEA,SAAS,aACP,QACA,QACA;AACA,SAAO,CAAC,OAAoB;AAC1B,iBAAa,IAAI,IAAI,MAAM;AAC3B,iBAAAA,aAAc,EAAE,QAAQ,IAAI,WAAW,WAAW,OAAO,CAAC;AAAA,EAC5D;AACF;AAQO,SAAS,YACd,MAGM;AACN,MAAI,CAAC;AAAW;AAChB,MAAI,CAAC,MAAM,QAAQ,IAAI;AAAG,WAAO,CAAC,IAAI;AACtC,OAAK,QAAQ,CAAC,QAAQ;AACpB,UAAM,EAAE,QAAQ,OAAO,GAAG,KAAK,IAAI;AACnC,wBAAoB,QAAQ,aAAa,MAAM,KAAK,CAAC;AAAA,EACvD,CAAC;AACH;AASO,SAAS,eACd,MACA,UAAoC,CAAC,GACe;AACpD,QAAM,aAAuB,qBAAU,IAAI;AAC3C,QAAM,CAAC,QAAQC,UAAS,QAAI,uBAAS,IAAI;AAEzC,8BAAU,MAAM;AACd,gBAAY,EAAE,QAAQ,OAAO,CAAC,QAAQA,UAAS,GAAG,GAAG,QAAQ,CAAC;AAC9D,WAAO,MAAM;AACX,UAAI,OAAO;AAAS,+BAAS,OAAO,OAAO;AAAA,IAC7C;AAAA,EACF,GAAG,CAAC,OAAO,OAAO,CAAC;AAEnB,SAAO,CAAC,QAAQ,QAAQA,UAAS;AACnC;","names":["initParent","setValues"]}